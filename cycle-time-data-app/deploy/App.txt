<!DOCTYPE html>
<html>
<head>
    <title>Cycle Time Data</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Jul 06 2018 17:09:16 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Jul 06 2018 17:09:16 GMT-0700 (PDT)";
        var BUILDER = "rajan08";
        var CHECKSUM = 221091551608;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.CycleTimeCalculator',{
    singleton: true,

    precision: 0,  //number of decimal mpoints
    granularity: 'day',
    creationDateText: "(Creation)",
    noStateText: "(No State)",
    flowStates : {},

    getTimeInStateData: function(snapshots, field, value, dateField){

        snapshots = _.sortBy(snapshots, dateField);

        if (value === CArABU.technicalservices.CycleTimeCalculator.noStateText){
                value = "";
        }

        var inState = snapshots[0][field] === value;
            if(field == "FlowState"){
                inState = this.flowStates[snapshots[0][field]] === value;
            }

        var startTime = inState ? Rally.util.DateTime.fromIsoString(snapshots[0][dateField]) : null;


        var info = [],
            idx = 0;

        if (startTime){
            info[idx] = [startTime]
        }
        Ext.Array.each(snapshots, function(snap){
            var thisDate = Rally.util.DateTime.fromIsoString(snap[dateField]);
            var snap_field = snap[field];
            if(field == "FlowState"){
                snap_field = this.flowStates[snap_field] || "";
            }
            if (inState && snap_field !== value){
                info[idx].push(thisDate);
                idx++;
                inState = false;
            } else if (!inState && snap_field === value){
                info[idx] = [thisDate];
                inState = true;
            }
        }, this);
        //console.log('getTimeInStateData', field, value, snapshots[0].FormattedID, info);
        return info
    },

    getCycleTimeData: function(snaps, field, startValue, endValue, precedence){

        var startIdx = -1;
        precedence = _.filter(precedence, function(r){
            return (r !== CArABU.technicalservices.CycleTimeCalculator.noStateText || r !== "");
        });

        if (!Ext.isEmpty(startValue)){  //This is in case there is no start value (which means grab the first snapshot)
            startIdx = _.indexOf(precedence, startValue);
        }
        var endIdx = _.indexOf(precedence, endValue);

        //Assumes snaps are stored in ascending date order.
        var startDate = null,
            endDate = null;

        var previousStateIdx = -1;
        var stateIdx = -1;
        var cycleTime = null;

        if ( startIdx === -1 ) {
            startDate = Rally.util.DateTime.fromIsoString(snaps[0]._ValidFrom);
        }

        Ext.each(snaps, function(snap){
            var thisDate = Rally.util.DateTime.fromIsoString(snap._ValidFrom);
            var snap_field = snap[field];
            if(field == "FlowState"){
                snap_field = this.flowStates[snap_field] || "";
            }            
            if (snap_field){
                previousStateIdx = stateIdx;
                stateIdx = _.indexOf(precedence, snap_field);
            } else {
                if (previousStateIdx > 0){
                    stateIdx = -1;
                }
            }
            if (stateIdx >= startIdx && previousStateIdx < startIdx && startIdx > -1 && startDate === null){
                startDate = thisDate;
            }
            if (stateIdx >= endIdx && previousStateIdx < endIdx){
                endDate = thisDate;
                if (startDate != null){
                    cycleTime = Rally.util.DateTime.getDifference(endDate,startDate,'second');
                }
            }
        }, this);


        if (stateIdx < endIdx){
            cycleTime = null;
        }

        if (cycleTime) {
            cycleTime = cycleTime / CArABU.technicalservices.CycleTimeCalculator.getGranularityMultiplier(CArABU.technicalservices.CycleTimeCalculator.granularity);
            cycleTime = cycleTime.toFixed(CArABU.technicalservices.CycleTimeCalculator.precision);
        }

        return { cycleTime: cycleTime, endDate: endDate, startDate: startDate};
    },
    getGranularityMultiplier: function(granularity){
        granularity = granularity.toLowerCase();
        if (granularity === 'minute'){ return 60; }
        if (granularity === 'hour') { return 3600; }
        if (granularity === 'week') { return 604800; }
        return 86400;  //default to day
    },
    calculateTimeInState: function(dateArrays){
        var timeInState = 0;

        Ext.Array.each(dateArrays, function(a){
            var startDate = (a.length > 0) && a[0] || null,
                endDate = (a.length > 1) && a[1] || new Date();

            if (startDate && endDate){
                timeInState = timeInState + Rally.util.DateTime.getDifference(endDate, startDate, 'second');
            }

        });
        timeInState = timeInState/CArABU.technicalservices.CycleTimeCalculator.getGranularityMultiplier(CArABU.technicalservices.CycleTimeCalculator.granularity);

        return timeInState.toFixed(CArABU.technicalservices.CycleTimeCalculator.precision);
    },
    getRenderedTimeInStateValue: function(timeInStateData, stateName, stateValue, noDataText){

            var timeData = timeInStateData && timeInStateData[stateName];
            if (timeData && stateValue){
                timeData = timeData[stateValue];
            }

            if (!timeData || timeData.length === 0){
                return noDataText;
            }

            return CArABU.technicalservices.CycleTimeCalculator.calculateTimeInState(timeData);
    },
    getFirstStartDate: function(timeInStateData, stateName, stateValue){

        var timeData = timeInStateData && timeInStateData[stateName];
        if (timeData && stateValue){
            timeData = timeData[stateValue];
        }

        if (timeData && timeData.length > 0){
            return timeData[0][0];
        }
        return null;
    },
    getLastEndDate: function(timeInStateData, stateName, stateValue){
       //console.log('getLastEndDate', stateName, stateValue)
        var timeData = timeInStateData && timeInStateData[stateName];
        if (timeData && stateValue){
            timeData = timeData[stateValue];
        }
       //console.log('getLastEndDate', timeData)
        if (timeData && timeData.length > 0){
            return timeData[timeData.length-1] && timeData[timeData.length-1][0] || null ;
        }
        return null;
    },
    getExportTimestampCSV: function(records, exportDateFormat){
        var headers = ['FormattedID','State','StateValue','StartDate','EndDate'],
            csv = [headers.join(',')],
            getTimeSpanRow = function(timeSpan, formattedID, stateName, stateValue){
                var startDate = timeSpan.length > 0 && timeSpan[0] && Rally.util.DateTime.format(timeSpan[0],exportDateFormat) || "",
                    endDate = timeSpan.length > 1 && timeSpan[1] && Rally.util.DateTime.format(timeSpan[1],exportDateFormat) || "",
                    row = [formattedID, stateName, stateValue, startDate, endDate];
                return row.join(",");
            };

        for (var i = 0; i < records.length; i++){

            var timeInStateData = records[i].get('timeInStateData'),
                formattedID = records[i].get('FormattedID');
            if (timeInStateData){
                Ext.Object.each(timeInStateData, function(stateName,stateValues){
                    if (stateName != "snaps"){
                        if (Ext.isArray(stateValues)){ //then this is ready or blocked, a boolean state
                            Ext.Array.each(stateValues, function(timeSpan){
                                csv.push(getTimeSpanRow(timeSpan, formattedID, stateName, "true"));
                            });
                        } else {
                            Ext.Object.each(stateValues, function(valueName, timeSpans){
                                Ext.Array.each(timeSpans, function(timeSpan){
                                    csv.push(getTimeSpanRow(timeSpan, formattedID, stateName, valueName));
                                });
                            });
                        }
                    }
                });
            }
        }
        return csv.join("\r\n");
    }
});
Ext.define('CA.technicalservices.CycleTimePickerButton', {
    extend: 'Rally.ui.Button',
    alias: 'widget.cycletimepickerbutton',

    cls: 'secondary rly-small',
    iconCls: 'icon-history',

    stateful: true,
    stateId: 'cycleTimePanel',
    stateEvents: ['click','expand', 'collapse', 'parametersupdated'],
    text: '',

    config: {
        context: undefined,
        modelNames: undefined,
        toolTipConfig: {
            anchor: 'top',
            mouseOffset: [-9, -2]
        }
    },

    initComponent: function() {
        this.callParent(arguments);

        if (!this.stateful || (this.stateful && !this._hasState())) {
            this.applyState({});
        }

        this.on('click', this._togglePanel, this, { buffer: 200 });
        this.on('parametersupdated', this._onPanelChange, this, { buffer: 500 });
        //this.on('collapse', this._onCollapse, this);
    },
    _hasState: function(){
        if (this.stateful && this.stateId) {
            return !!Ext.state.Manager.get(this.stateId);
        }
        return false;
    },
    _onPanelChange: function(params){

        Ext.suspendLayouts();
        if (this.hasValidCycleTimeParameters()) {
            this.setText('Active Cycle Time Data');
            this._indicateActiveFilterPresent();
        } else {
            this.setText('');
            this._indicateNoActiveFilterPresent();
        }
        Ext.resumeLayouts(false);
        this.fireEvent('cycletimeparametersupdated', this);
    },
    afterRender: function() {
        this.callParent(arguments);
        this.toolTip.on('beforeshow', this._onBeforeShowToolTip, this);
    },
    hasValidCycleTimeParameters: function(){
        return this.cycleTimePanel && this.cycleTimePanel.hasValidCycleTimeParameters();
    },
    getCycleTimeParameters: function() {
        return this.cycleTimePanel && this.cycleTimePanel.getCycleTimeParameters();
    },
    getState: function() {
        if (this.cycleTimePanel) {
            var state = this.cycleTimePanel.getCycleTimeParameters();
            state.collapsed = this.cycleTimePanel.getCollapsed();
            return state;
        } else {
            return Ext.state.Manager.get(this.stateId);
        }
    },
    applyState: function(state) {
        //console.log('applyState', state);
        this._build(state);
    },

    onDestroy: function() {
        _.invoke(_.compact([
            this.relayedEvents,
            this.cycleTimePanel
        ]), 'destroy');
        this.callParent(arguments);
    },

    clearAllFilters: function() {
        this.cycleTimePanel && this.cycleTimePanel.clear();
    },

    _build: function(applyParameters) {

        return this._loadModels().then({
            success: _.partial(this._onModelLoadSuccess, applyParameters),
            scope: this
        });
    },

    _onModelLoadSuccess: function(applyParameters) {
        this._createCycleTimePanel();
        if (applyParameters) {
            this._applyParameters();
        }
    },

    _loadModels: function() {

        if (this.models) {
            return Deft.Promise.when(this.models);
        } else {
            return Rally.data.ModelFactory.getModels({
                context: this.context || Rally.environment.getContext(),
                types: this.modelNames
            }).then({
                success: function(models) {
                    this.models = models;
                },
                scope: this
            });
        }
    },
    _applyParameters: function(params){


      // console.log('_applyParameters', params);

    },
    _indicateActiveFilterPresent: function() {
        if (!this.hasCls('primary')) {
            this.addCls('primary');
            this.removeCls('secondary');
        }
    },
    _indicateNoActiveFilterPresent: function() {
        if (!this.hasCls('secondary')) {
            this.addCls('secondary');
            this.removeCls('primary');
        }
    },
    _createCycleTimePanel: function() {

        if (!this.cycleTimePanel){
            this.cycleTimePanel = Ext.widget({
                xtype: 'cycletimepickerpanel',
                modelNames: this.modelNames,
                models: this.models,
                context: this.context,
                flex: 1
            });
            this.relayedEvents = this.relayEvents(this.cycleTimePanel, ['expand', 'collapse', 'panelresize', 'parametersupdated']);
            this.fireEvent('cycletimepickerready', this.cycleTimePanel);
        }
    },
    _togglePanel: function() {
        this.cycleTimePanel && this.cycleTimePanel.toggleCollapse();
    },

    //_onCollapse: function() {
    //    console.log('_onCollapse validate here?');
    //},

    collapse: function() {
        this.cycleTimePanel && this.cycleTimePanel.collapse();
    },

    _onBeforeShowToolTip: function() {
        var action = this.cycleTimePanel && this.cycleTimePanel.collapsed ? 'Show' : 'Hide' || "Toggle";
        this.toolTip.update(Ext.String.format('{0} Cycle Time parameters', action));
    }
});
Ext.define('CArABU.technicalservices.CycleTimeDataStore',{
    logger: new Rally.technicalservices.Logger(),

    MAX_CHUNK_SIZE: 25,
    USE_POST: false,

    constructor: function(config){
        this.modelNames = config.modelNames;
        this.stateField = config.stateField;
        this.includeReady = config.includeReady || false;
        this.includeBlocked = config.includeBlocked || false;
        this.stateValues = config.stateValues || [];
        this.fromState = config.fromState;
        this.toState = config.toState;
        this.startDate = config.startDate || null;
        this.endDate = config.endDate || null;
    },

    load: function(records){
        var deferred = Ext.create('Deft.Deferred');

        var objectIDs = _.map(records, function(r){
            return r.get('ObjectID');
        });
        this.logger.log('objectIDs', objectIDs);
        var promises = [];
        for (var i=0; i < objectIDs.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(objectIDs, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                this.logger.log('load Success', results);
                var snapsByOid = this._getSnapshotsByOid(results);
                var updatedRecords = this._updateRecords(snapsByOid, records);
                deferred.resolve(updatedRecords);
            },
            failure: function(msg){
                this.logger.log('load Failure', msg);
            },
            scope: this
        });

        return deferred;
    },
    _getSnapshotsByOid: function(results){
        results = _.flatten(results);
        var snapsByOid = {};
        Ext.Array.each(results, function(snap){
            var oid = snap.get('ObjectID');
            if (!snapsByOid[oid]){
                snapsByOid[oid] = [];
            }
            snapsByOid[oid].push(snap.getData());
        });
        return snapsByOid;
    },
    _updateRecords: function(resultsByOid, records){
        var updatedRecords = [];
        Ext.Array.each(records, function(r){
            var oid = r.get('ObjectID'),
                snapshots = resultsByOid[oid];

            var cycleTimeData = this._mungeCycleTimeData(snapshots);
            var timeInStateData = this._mungeTimeInStateData(snapshots);
            console.log(cycleTimeData, timeInStateData);
            if (cycleTimeData && this._isCycleInDateRange(cycleTimeData, this.startDate, this.endDate)){
                r.set("cycleTimeData",cycleTimeData);
                r.set("timeInStateData", timeInStateData);
                updatedRecords.push(r);
            }

        }, this);
        return updatedRecords;
    },
    _isCycleInDateRange: function(cycleTimeData, startDate, endDate){
       console.log('_isCycleInDateRange', cycleTimeData.endDate, startDate, endDate);
        if (startDate && cycleTimeData.endDate < startDate){
            return false;
        }
        if (endDate && cycleTimeData.endDate > endDate){
            return false;
        }
        return true;

    },
    _mungeCycleTimeData: function(snapshots){
        if (!snapshots || snapshots.length === 0){
            return null;
        }
        var cycleTimeData = CArABU.technicalservices.CycleTimeCalculator.getCycleTimeData(snapshots, this.stateField, this.fromState, this.toState, this.stateValues);

        cycleTimeData.snaps = snapshots;

        return cycleTimeData;
    },
    _mungeTimeInStateData: function(snapshots){
        if (!snapshots || snapshots.length === 0){
            return null;
        }
       var timeInStateData =  {snaps: snapshots};

        timeInStateData.Blocked = CArABU.technicalservices.CycleTimeCalculator.getTimeInStateData(snapshots, "Blocked", true, "_ValidFrom","minute");
        timeInStateData.Ready = CArABU.technicalservices.CycleTimeCalculator.getTimeInStateData(snapshots, "Ready", true, "_ValidFrom","minute");
        var stateField = this.stateField;

        timeInStateData[stateField] = {};
        Ext.Array.each(this.stateValues, function(stateValue){
           timeInStateData[stateField][stateValue] = CArABU.technicalservices.CycleTimeCalculator.getTimeInStateData(snapshots,stateField, stateValue, "_ValidFrom");

        });

       return timeInStateData;
    },
    _fetchChunk: function(objectIDs){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('_fetchChunks', objectIDs.length);

        Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: this._getFetchList(),
            filters: [
                {
                    property: 'ObjectID',
                    operator: 'in',
                    value: objectIDs
                }
            ],
            useHttpPost: this.USE_POST,
            sorters: [{
                property: 'ObjectID',
                direction: 'ASC'
            },{
                property: '_ValidFrom',
                direction: 'ASC'
            }],
            hydrate: this._getHydrateFields(),
            compress: true,
            removeUnauthorizedSnapshots: true
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading snapshots for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    console.log(msg);
                    deferred.resolve([]);
                }
            }
        });
        return deferred;
    },
    _getFetchList: function(){
        var fetch = ['FormattedID', '_ValidFrom','_ValidTo','ObjectID',this.stateField, "_PreviousValues." + this.stateField];
        if (this.includeReady){
            fetch = fetch.concat(["Ready","_PreviousValues.Ready"]);
        }
        if (this.includeBlocked){
            fetch = fetch.concat(["Blocked","_PreviousValues.Blocked"]);
        }
        return fetch;
    },
    _getHydrateFields: function(){
        var hydratedFields = ["ScheduleState","State"];
        if (Ext.Array.contains(hydratedFields, this.stateField)){
            return [this.stateField, "_PreviousValues." + this.stateField];
        }
        return [];
    }

});
Ext.define('CA.technicalservices.CycleTimePickerPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cycletimepickerpanel',

    cls: 'inline-filter-panel',
    flex: 1,
    header: false,
    minHeight: 46,
    padding: '8px 0 0 0',
    bodyPadding: '7px 5px 5px 5px',
    collapseDirection: 'top',
    collapsible: true,
    animCollapse: false,
    stateful: true,
    stateId: 'cycleTimePanel',

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);

        if (!this.stateful || (this.stateful && !this._hasState())) {
            this.applyState({});
        }

    },
    _hasState: function(){
        if (this.stateful && this.stateId) {
            return !!Ext.state.Manager.get(this.stateId);
        }
        return false;
    },
    _loadModels: function(state){
        if (this.models){
            this._addItems(state);
            return;
        }

        if (this.context && this.modelNames && this.modelNames.length > 0){
            Rally.data.ModelFactory.getModels({
                types: this.modelNames,
                context: this.context,
                success: function(models){
                    this.models = models;
                    this._addItems(state);
                },
                scope: this
            });
        }
    },
    _addItems: function(state){
        if (!state){
            state = {};
        }

        this.removeAll();

        this.add({
            xtype: 'rallybutton',
            cls: 'inline-filter-panel-close icon-cross',
            height: 18,
            userAction: 'Close (X) filter panel clicked',
            listeners: {
                click: function() {
                    this.collapse();
                },
                scope: this
            }
        });

        this.add(
            {
            xtype: 'container',
            flex: 1,
            layout: 'hbox',
            items: [{
                xtype: 'rallyfieldcombobox',
                model: this.modelNames[0],
                itemId: 'cb-StateField',
                fieldLabel: "Cycle Time Field",
                labelAlign: 'right',
                labelWidth: 150,
                width: 300,
                context: this.context,
                value: state.cycleStateField,
                _isNotHidden: this._isCycleTimeField
            },{
                xtype: 'rallybutton',
                enableToggle: true,
                itemId: 'btBlocked',
                margin: '6 6 6 185',
                cls: state.showBlocked ? 'primary rly-small' : 'secondary rly-small',
                iconCls: 'icon-blocked',
                toolTipText: "Calculate time in Blocked state",
                pressed: state.showBlocked || false,
                listeners: {
                    toggle: this._toggleButton,
                    scope: this
                }
            }, {
                xtype: 'rallybutton',
                enableToggle: true,
                itemId: 'btReady',
                margin: 6,
                iconCls: 'icon-ok',
                cls: state.showReady ? 'primary rly-small' : 'secondary rly-small',
                pressed: state.showReady || false,
                toolTipText: "Calculate time in Ready state",
                listeners: {
                    toggle: this._toggleButton,
                    scope: this
                }
            }]
        });

        var fromStates = [],
            toStates = [];

        if (state.cycleStates && state.cycleStates.length > 0){
            Ext.Array.each(state.cycleStates, function(s){
                if (state.cycleStateField !== "ScheduleState"){
                    fromStates.push(CArABU.technicalservices.CycleTimeCalculator.noStateText);
                }
                fromStates.push(s);
                if (!state.cycleEndState || (state.cycleEndState === s) || toStates.length > 0){
                    toStates.push(s);
                }
            });
            fromStates = _.map(state.cycleStates, function(s){ return {value: s}; });
            toStates = _.map(state.cycleStates, function(s){ return {value: s}; });
        }

        this.add({
            xtype: 'container',
            flex: 1,
            layout: 'hbox',
            items: [{
                xtype: 'rallycombobox',
                itemId: 'cb-fromState',
                allowBlank: true,
                allowNoEntry: true,
                noEntryText: '-- No State --',
                fieldLabel: 'Cycle Time State From',
                labelAlign: 'right',
                labelWidth: 150,
                width: 300,
                store: Ext.create('Rally.data.custom.Store', {data: fromStates}),
                value: state.cycleStartState || null,
                valueField: 'value',
                displayField: 'value'
            },{
                xtype: 'rallycombobox',
                itemId: 'cb-toState',
                fieldLabel: 'to',
                labelWidth: 15,
                labelAlign: 'right',
                width: 165,
                allowBlank: false,
                disabled: toStates.length === 0,
                store: Ext.create('Rally.data.custom.Store', {data:toStates}),
                value: state.cycleEndState || null,
                valueField: 'value',
                displayField: 'value',
                listeners: {
                    scope: this,
                    select: this.updateCycleTimeParameters
                }
            }]

        },{
            xtype: 'container',
            flex: 1,
            layout: 'hbox',
            items: [{
                xtype: 'rallydatefield',
                fieldLabel: 'Cycle End Date From',
                labelSeparator: "",
                itemId: 'dtFrom',
                labelAlign: 'right',
                labelWidth: 150,
                width: 300,
                value: state.startDate || null,
                toolTipText: "If this is populated, cycle time will only be shown for artifacts that transitioned into the selected Cycle End State AFTER this date.",

                listeners: {
                    scope: this,
                    select: this.updateCycleTimeParameters
                }
            },{
                xtype: 'rallydatefield',
                fieldLabel: 'to',
                itemId: 'dtTo',
                labelAlign: 'right',
                labelSeparator: "",
                labelWidth: 15,
                width: 165,
                value: state.endDate || null,
                toolTipText: "If this is populated, cycle time will only be shown for artifacts that transitioned into the selected Cycle End State BEFORE this date.",
                listeners: {
                    scope: this,
                    select: this.updateCycleTimeParameters
                }
            }]
        });

        this.down('#cb-fromState').on('select', this._updateToState, this);

        var stateFieldCb = this.down('#cb-StateField');
        stateFieldCb.on('ready', this._updateStateDropdowns, this);
        stateFieldCb.on('select', this._updateStateDropdowns, this);

        this._updateStateDropdowns(stateFieldCb);
        this.updateCycleTimeParameters();
    },
    clear: function(){
        this._getFromStateCombo().setValue(null);
    },
    getState: function(){
        var currentState = this.getCycleTimeParameters();
        if (currentState.cycleStates && Ext.isArray(currentState.cycleStates)){
            currentState.cycleStates = currentState.cycleStates.join(',');
        }
        return currentState;
    },
    _getStateFieldCombo: function(){
        return this.down('#cb-StateField') || null;
    },
    _getFromStateCombo: function(){
        return this.down('#cb-fromState') || null;
    },
    _getToStateCombo: function(){
        return this.down('#cb-toState') || null;
    },

    applyState: function(state){
        if (state && state.cycleStates && !Ext.isArray(state.cycleStates)){
            state.cycleStates = state.cycleStates.split(',');
        }
        this._loadModels(state);
    },
    _updateToState: function(cbFrom){

        var toStateCombo = this.down('#cb-toState');

        toStateCombo && toStateCombo.setDisabled(true);

        if (!cbFrom || !cbFrom.getValue() || !cbFrom.getRecord() || !toStateCombo){
            return;
        }

        var data = [],
            fromValue = cbFrom.getValue();
        Ext.Array.each(cbFrom.getStore().getRange(), function(d){
            if (fromValue === d.get('value') || data.length > 0){
                data.push(d.getData());
            }
        });
        toStateCombo.setDisabled(false);
        toStateCombo.bindStore(Ext.create('Rally.data.custom.Store',{ data: data}));
        //if (this.state && this.state.cycleEndState && toStateCombo.getValue() !== this.state.cycleEndState){
        //    toStateCombo.setValue(this.state.cycleEndState);
        //}
        this.updateCycleTimeParameters();
    },
    hasValidCycleTimeParameters: function(){

        var fromState = this.down('#cb-fromState') && this.down('#cb-fromState').getValue(),
            toState = this.down('#cb-toState') && this.down('#cb-toState').getValue();

        if(!fromState || !toState){
            return false;
        }
        return true;
    },
    getCycleTimeParameters: function(){
        var cycleTimeField = this._getStateFieldCombo() && this._getStateFieldCombo().getValue() || null,
            cycleStartState = this._getFromStateCombo() && this._getFromStateCombo().getValue() || null,
            cycleEndState = this._getToStateCombo() && this._getToStateCombo().getValue() || null,
            showReady = this.down('#btReady') && this.down('#btReady').pressed || false,
            showBlocked = this.down('#btBlocked') && this.down('#btBlocked').pressed || false,
            cycleEndRangeStart = this.down('#dtFrom') && this.down('#dtFrom').getValue() || null,
            cycleEndRangeTo = this.down('#dtTo') && this.down('#dtTo').getValue() || null,
            states = this.down('#cb-fromState') && this.down('#cb-fromState').getStore().getRange() || [];

        states = Ext.Array.map(states, function(r) {
            //if (r.get('value') !== CArABU.technicalservices.CycleTimeCalculator.creationDateText) {
                return r.get('value');
        });
        states = _.uniq(states);

        return {
            cycleStateField: cycleTimeField,
            cycleStartState: cycleStartState,
            cycleEndState: cycleEndState,
            showReady: showReady,
            showBlocked: showBlocked,
            startDate: cycleEndRangeStart,
            endDate: cycleEndRangeTo,
            cycleStates: states
        };
    },
    updateCycleTimeParameters: function(){
        this.saveState();
        if (this.hasValidCycleTimeParameters()){
            this.fireEvent('parametersupdated', this.getCycleTimeParameters());
        } else {
            this.fireEvent('parametersupdated', {});
        }
    },
    _isCycleTimeField: function(field){
        var whitelistFields = ['State','ScheduleState','FlowState'];

        if (field.hidden){
            return false;
        }

        if (Ext.Array.contains(whitelistFields, field.name)){
            return true;
        }

        if (field.readOnly){
            return false;
        }

        var allowed_attribute_types = ['STATE','STRING'],
            attributeDef = field && field.attributeDefinition;
        if (attributeDef){
            if ( attributeDef.Constrained && Ext.Array.contains(allowed_attribute_types, attributeDef.AttributeType)) {
                return true;
            }
        }
        return false;
    },
   _toggleButton:  function(btn, state){

        if (state){
            btn.removeCls('secondary');
            btn.addCls('primary');
        } else {
            btn.removeCls('primary');
            btn.addCls('secondary');
        }
        this.updateCycleTimeParameters();
    },
    _updateStateDropdowns: function(cb){

        var fromStateCombo = this.down('#cb-fromState'),
            toStateCombo = this.down('#cb-toState');

        var toStatePreviousValue = toStateCombo && toStateCombo.getValue(),
            fromStatePreviousValue = fromStateCombo && fromStateCombo.getValue();

        fromStateCombo && fromStateCombo.setDisabled(true);
        toStateCombo &&  toStateCombo.setDisabled(true);
        var store = Ext.create('Rally.data.custom.Store',{
            data: []
        });
        toStateCombo.bindStore(store);

        if (!cb || !cb.getValue() || !cb.getRecord()){
            return;
        }

        var model = cb.model;

        var data = [];
        if (cb.getValue() !== "ScheduleState"){
            data.push({value: CArABU.technicalservices.CycleTimeCalculator.noStateText });
        }
        model.getField(cb.getValue()).getAllowedValueStore().load({
            callback: function(records, operation){
                Ext.Array.each(records,function(r){
                    data.push({value: r.get('StringValue') });
                });
                var store = Ext.create('Rally.data.custom.Store',{
                    data: data
                });
                fromStateCombo.bindStore(store);
                fromStateCombo.setDisabled(false);
                if (fromStatePreviousValue){
                    fromStateCombo.setValue(fromStatePreviousValue);
                }

                toStateCombo.bindStore(store);
                toStateCombo.setDisabled(false);
                if (toStatePreviousValue){
                    toStateCombo.setValue(toStatePreviousValue);
                }

                this.updateCycleTimeParameters();
            },
            scope: this
        });

    }
});
Ext.define('CArABU.technicalservices.Exporter',{
    singleton: true,

    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    saveAs: function(textToWrite, fileName)
    {
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            window.BlobBuilder = window.BlobBuilder ||
                window.WebKitBlobBuilder ||
                window.MozBlobBuilder ||
                window.MSBlobBuilder;
            if (window.BlobBuilder && e.name == 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    }
});
Ext.define('CA.technicalservices.FieldPicker', {
        alias: 'widget.fieldpickerbutton',
        extend:'Rally.ui.Button',
        requires: [
            'Rally.ui.popover.Popover',
            'Rally.ui.Button',
            'Rally.ui.picker.FieldPicker',
            'Ext.state.Manager'
        ],
        toolTipConfig: {
            html: 'Show Columns',
            anchor: 'top'
        },
        iconCls: 'icon-add-column',

        cls: 'field-picker-btn secondary rly-small',

        alwaysSelectedValues: ['FormattedID', 'Name'], // DragAndDropRank gets added in init if Drag and Drop is enabled for the workspace in the component's context

        fieldBlackList: [],

        fieldPickerConfig: {},

        buttonConfig: {},

        modelNames: [],

        rankingEnabled: false,

        margin: '3 9 0 0',

        //This does not show the Rank column

        constructor: function (config) {
            this.config = _.merge({}, this.config || {}, config || {});
            this.callParent([config]);
        },

        initComponent: function() {

            if (this.models){
                this.on('click', this._createPopover, this);
                this.callParent(arguments);
                return;
            }

            if (this.context && this.modelNames && this.modelNames.length > 0){
                Rally.data.ModelFactory.getModels({
                    types: this.modelNames,
                    context: this.context,
                    success: function(models){
                        console.log('models');
                        this.models = models;

                    },
                    failure: function(failedParam){
                        console.log('failedparam');
                    },
                    scope: this
                });
                this.on('click', this._createPopover, this);
            } else {
                this.iconCls = 'icon-none';
                var msg = "Please update the CA.technicalservices.FieldPicker configuration with modelNames and context";
                this.toolTipConfig= {
                    html: '<div style="color:red;">' + msg + '</div>'
                }
                this.on('click', function(){ Rally.ui.notify.Notifier.showError({message: msg})})
            }
            this.callParent(arguments);
        },
        getFields: function(){
            return this._fields || this.alwaysSelectedValues;
        },
        _getPickerConfig: function() {
            var pickerConfig;
            pickerConfig = _.extend({
                value: this._fields,
                fieldBlackList: this.fieldBlackList,
                alwaysSelectedValues: this.alwaysSelectedValues,
                context: this.context
            }, this.fieldPickerConfig);

            return pickerConfig;
        },

        _createPopover: function(btn) {
            var popoverTarget = btn.getEl();

            this.popover = Ext.create('Rally.ui.popover.Popover', {
                target: popoverTarget,
                placement: ['bottom', 'left', 'top', 'right'],
                cls: 'field-picker-popover',
                toFront: Ext.emptyFn,
                buttonAlign: 'center',
                title: this.getTitle(),
                listeners: {
                    destroy: function () {
                        this.popover = null;
                    },
                    scope: this
                },
                buttons: [
                    {
                        xtype: "rallybutton",
                        text: 'Apply',
                        cls: 'field-picker-apply-btn primary rly-small',
                        listeners: {
                            click: function() {
                                this._onApply(this.popover);
                            },
                            scope: this
                        }
                    },
                    {
                        xtype: "rallybutton",
                        text: 'Cancel',
                        cls: 'field-picker-cancel-btn secondary dark rly-small',
                        listeners: {
                            click: function() {
                                this.popover.close();
                            },
                            scope: this
                        }
                    }
                ],
                items: [
                    _.extend({
                        xtype: 'rallyfieldpicker',
                        cls: 'field-picker',
                        itemId: 'fieldpicker',
                        modelTypes: this._getModelTypes(),
                        alwaysExpanded: true,
                        width: 200,
                        emptyText: 'Search',
                        selectedTextLabel: 'Selected',
                        availableTextLabel: 'Available',
                        listeners: {
                            specialkey: function(field, e) {
                                if (e.getKey() === e.ESC) {
                                    this.popover.close();
                                }
                            },
                            scope: this
                        }
                    }, this._getPickerConfig())
                ]
            });
        },

        _getModelTypes: function() {
            return _.pluck(this._getModels(), 'typePath');
        },

        _getModels: function() {
            return _.reduce(this.models, function(accum, model) {
                if (model.typePath === 'artifact') {
                    accum = accum.concat(model.getArtifactComponentModels());
                } else {
                    accum.push(model);
                }
                return accum;
            }, []);
        },

        getTitle: function () {
            return 'Show Columns';
        },

        /**
         * Update the fields displayed. In grid mode this will be the columns displayed. In board mode it will be
         * the fields on the cards
         *
         * @param {String[]|Object[]} fields A list of field names to display
         * @param {Boolean} true to suspend store load if it will be triggered elsewhere
         */
        updateFields: function (fields, suspendLoad) {
            this._fields = fields;
            if (this.popover && this.popover.down('rallyfieldpicker')) {
                this.popover.down('rallyfieldpicker').setValue(fields.join(','));
            }
            this.saveState();
        },
        getState: function(){
            return {
                fields: this._fields
            };
        },
        applyState: function(state){
            if (state){
                this._fields = state.fields;
            }
        },
        _onApply: function(popover) {
            var fieldPicker = popover.down('rallyfieldpicker'),
                fields = _.map(fieldPicker.getValue(), function (field) {
                    return field.get('name');
                });

            this.updateFields(fields);
            popover.close();

            this.fireEvent('fieldsupdated', fields);
        }
    });
Ext.define('Rally.ui.LeftRight', {
    alias: 'widget.rallyleftright',
    extend: 'Ext.container.Container',

    cls: 'rui-leftright',
    defaults: {
        xtype: 'container'
    },
    items: [
        {
            itemId: 'left',
            cls: 'rly-left'
        },
        {
            itemId: 'right',
            cls: 'rly-right'
        }
    ],

    getLeft: function() {
        return this.down('#left');
    },

    getRight: function() {
        return this.down('#right');
    }
});

Ext.apply(Ext.data.SortTypes, {
    asUser: function(s) {
        if (Ext.isString(s)){
            return s;
        }
        return s && s.DisplayName || s._refObjectName;
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);

        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _getColumnConfigsBasedOnCurrentOrder: function(columnConfigs) {
        var cols = _(this.headerCt.items.getRange()).map(function(column) {
            //override:  Added additional search for column.text
            return _.contains(columnConfigs, column.dataIndex) ? column.dataIndex : _.find(columnConfigs, {xtype: column.xtype, text: column.text });
        }).compact().value();

        return cols;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            if (Ext.isString(config)){
                return true;
            }
            if (!_.find(currentColumns, {dataIndex: config.dataIndex})){
                return true;
            }

            if (!_.find(currentColumns, {text: config.text})){
                    return true;
            }

            return false;
        });

        console.log('added columns', addedColumns, columnConfigs, currentColumns);

        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }

        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }

    }
});


Ext.define('CArABU.technicalservices.CycleTimeData.Settings',{
    singleton: true,

    getFields: function(settings){

        // var filters = [{
        //     property: 'TypePath',
        //     operator: 'contains',
        //     value: 'PortfolioItem/'
        // },{
        //     property: 'TypePath',
        //     value: 'Defect'
        // },{
        //     property: 'TypePath',
        //     value: 'HierarchicalRequirement'
        // }];
        // filters = Rally.data.wsapi.Filter.or(filters);


        return [
        // {
        //     xtype: 'rallycombobox',
        //     name: 'artifactType',
        //     storeConfig: {
        //         model: 'TypeDefinition',
        //         filters: filters,
        //         fetch: ['TypePath','DisplayName'],
        //         remoteFilter: true
        //     },
        //     fieldLabel: 'Artifact Type',
        //     allowBlank: false,
        //     labelAlign: 'right',
        //     labelWidth: 100,
        //     valueField: 'TypePath',
        //     displayField: 'DisplayName'
        // },
        // {
        //     xtype: 'radiogroup',
        //     fieldLabel: 'Granularity',
        //     columns: 1,
        //     vertical: true,
        //     labelAlign: 'top',
        //     layout: 'hbox',
        //     labelWidth: 100,
        //     width:300,
        //     labelCls: 'settingsLabel',
        //     items: [{
        //         boxLabel: "Week",
        //         name: 'granularity',
        //         inputValue: "week",
        //         checked: "week" === settings.granularity
        //     },{
        //         boxLabel: "Day",
        //         name: 'granularity',
        //         inputValue: "day",
        //         checked: "day" === settings.granularity
        //     }, {
        //         boxLabel: "Hour",
        //         name: 'granularity',
        //         inputValue: "hour",
        //         checked: "hour" === settings.granularity
        //     }, {
        //         boxLabel: "Minute",
        //         name: 'granularity',
        //         inputValue: "minute",
        //         checked: "minute" === settings.granularity
        //     } ]
        // },
        {
            xtype: 'rallynumberfield',
            fieldLabel: 'Max Export Limit',
            name: 'exportLimit',
            labelAlign: 'right',
            labelWidth: 100,
            minValue: 10,
            maxValue: 10000
        },{
            xtype: 'textarea',
            fieldLabel: 'Query',
            name: 'queryFilter',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            labelAlign: 'right',
            labelWidth: 100,
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: false,
            validateOnChange: false,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        }];
    }
});
Ext.define('CArABU.technicalservices.CycleTimeTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.cycletimetemplatecolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;

        Ext.QuickTips.init();

        me.tpl = new Ext.XTemplate('<tpl><div data-qtip="{[this.getTooltip(values)]}" style="cursor:pointer;text-align:right;">{[this.getCycleTime(values)]}</div></tpl>',{

            getCycleTime: function(values){

                var cycleTime = values && values.cycleTime ;
                if (cycleTime >= 0){
                    return cycleTime;
                }
                return '--';
            },
            getTooltip: function(values){

                var toolTip = "";
                if (values && values.startDate){
                    toolTip = Ext.String.format("Start: {0}",
                        Rally.util.DateTime.format(values.startDate,'Y-m-d h:i:s a'));

                }

                if (values && values.cycleTime && values.endDate){
                    toolTip = Ext.String.format("{0} <br/>{1}</br>End: {2}",
                        values.cycleTime,
                        toolTip,
                        Rally.util.DateTime.format(values.endDate,'Y-m-d h:i:s a'));
                }

                return toolTip;
            }

        });
        me.hasCustomRenderer = true;
        me.callParent(arguments);
    },
    defaultRenderer: function(value, meta, record) {
        var data = Ext.apply({}, record.get('cycleTimeData'));
        return this.tpl.apply(data);
    },
});




Ext.define('CArABU.technicalservices.TimeTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.timetemplatecolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;

        Ext.QuickTips.init();

        me.tpl = new Ext.XTemplate('<tpl><div data-qtip="{[this.getTooltip(values)]}" style="cursor:pointer;text-align:right;">{[this.getCurrentIcon(values)]}{[this.getTime(values)]}</div></tpl>',{
            stateName: me.stateName,
            dataType: me.dataType,
            stateValue: me.stateValue,

            getTime: function(values){
                return CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(values,this.stateName,this.stateValue,'--');
            },
            getCurrentIcon: function(values){
                if (values.currentValue && (values.currentValue === true || values.currentValue === this.stateValue)){
                    var iconCls = "icon-square",
                        color = "#005eb8";

                    if (this.stateName === "Blocked"){
                        iconCls = "icon-blocked";
                        color = "#b81b10";
                    }
                    if (this.stateName === "Ready"){
                        iconCls = "icon-ready";
                        color = "#8dc63f";
                    }
                    return Ext.String.format('<div class="{0}" style="color:{1}"></div>', iconCls, color);
                }
                return "";
            },
            getTooltip: function(values){
                var timeData = values[this.stateName];
                if (timeData && this.stateValue){
                    timeData = timeData[this.stateValue];
                }

                if (!timeData || timeData.length === 0){
                    return "";
                }

                var stateValue = this.stateValue || "[No State]";
                if (this.stateName === "Blocked" || this.stateName === "Ready"){
                    stateValue = "true";
                }

                var toolTip = Ext.String.format("{0}: {1}<br/>",this.stateName, stateValue);
                Ext.Array.each(timeData, function(t){
                    var startDate = t && t.length > 0 && Rally.util.DateTime.format(t[0], 'Y-m-d h:i:s a') || "";
                    var endDate = t && t.length > 1 && Rally.util.DateTime.format(t[1], 'Y-m-d h:i:s a') || "current";
                    if (startDate.length > 0){
                        toolTip = toolTip + Ext.String.format("{0} - {1}<br/>",startDate, endDate);
                    }
                });
                return toolTip;
            }

        });
        me.hasCustomRenderer = true;
        me.callParent(arguments);
    },
    //getValue: function(){
    //    return values[this.costField] || 0;
    //},
    defaultRenderer: function(value, meta, record) {
        var data = Ext.apply({}, record.get(this.dataType));
        data.currentValue = record.get(this.stateName);
        return this.tpl.apply(data);
    }

});


Ext.define('CA.technicalservices.Utility',{
    singleton: true,
    loadModels: function(modelNames, context){
        return Rally.data.ModelFactory.getModels({
            types: modelNames,
            context: context
        });
    }
});
 Ext.define("cycle-time-data-app", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),

    defaults: {
        margin: 10,
        labelAlign: 'right'
    },

    instructions: 'Please click the Filter icon <div class="icon-filter"></div> to define filters for the current data set to calculate historical cycle time data for.<br/>Please click the Cycle Time button <div class="icon-history"></div> to add criteria for calculating cycle time.  <br/>After parameters have been selected, click <div class="icon-refresh"></div><b>Update</b> to load the data.<br/><br/>If a Cycle Time State, Cycle Time State From and To are not defined, Cycle Time data will not be calculated.  <br/>Cycle End Date From and To are optional.  If Cycle End Date From and To are selected, then only artifacts that transitioned into or past the Cycle Time To State during the selected date range will be displayed. <br/><br/>More detailed app information can be found in the <a href="https://github.com/RallyTechServices/cycle-time-apps-2.1/blob/master/cycle-time-data-app/README.md" target="_blank">Github README file here</a> ',

    items: [
        {xtype:'container',itemId:'top_box', layout: 'hbox', items: [
            {xtype:'container',itemId:'artifact_box'},
            {xtype:'container',itemId:'granularity_box'}
        ]},
        {xtype:'container',itemId:'selector_box_parent', layout: 'hbox', items: [
            {xtype:'container',itemId:'selector_box', layout: 'hbox', flex: 1},
            {xtype:'container',itemId:'selector_box_right', layout:'hbox', cls: 'rly-right'}
        ]},
        {xtype: 'container', itemId: 'filter_box', flex: 1},
        {xtype: 'container', itemId: 'cycletime_box', flex: 1},
        {xtype: 'container', itemId: 'message_box', flex: 1, height: 45, tpl: '<tpl><div class="no-data-container"><div class="secondary-message">{message}</div></div></tpl>'},
        {xtype: 'container', itemId: 'total_box'},
        {xtype: 'container', itemId: 'grid_box'}        
    ],

    integrationHeaders : {
        name : "cycle-time-data-app"
    },

    config: {
        defaultSettings: {
          //  includeTypes:  ['HierarchicalRequirement','Defect'],
            artifactType: 'HierarchicalRequirement',
            queryFilter: "",
            granularity: 'day',
            precision: 2,
            exportLimit: 1000
        }
    },
    exportDateFormat: 'm/d/Y h:i:s',
    _gridConfig: {},

    launch: function() {
       this.logger.log('Launch Settings', this.getSettings());
       var me = this;

        var config = {
            model:  'FlowState',
            fetch: ['Name','ObjectID'],
            limit: Infinity
        };

        me.setLoading(true);

        Ext.Ajax.request({
            url: '/slm/webservice/v2.0/FlowState?fetch=Name,ObjectID&limit=Infinity&pagesize=2000',
            //url: '/slm/sbt/tag.sp?oid=' + tagOid,
            method: 'GET',
            success: function(response){
                console.log('FlowStates',JSON.parse(response.responseText));
                var response = JSON.parse(response.responseText);
                var results = response && response.QueryResult && response.QueryResult.Results || [];
                console.log(results);
                me.flow_states = {}
                _.each(results, function(fs){
                    me.flow_states[fs.ObjectID] = fs.Name;
                });
                console.log(me.flow_states);
                CArABU.technicalservices.CycleTimeCalculator.flowStates = me.flow_states;

                me.setLoading(false);
                me.addArtifactPicker();
            },
            failure: function(response){
                me.setLoading(false);
            }
        });


        // me.loadWsapiRecords(config).then({
        //     success: function(records){
        //         me.flow_state = {};
        //         _.each(records,function(fs){
        //             me.flow_state[fs.get('ObjectID')] = fs.get('Name');
        //         })
        //         console.log('Flow States',me.flow_state);
        //         me.setLoading(false);
        //         me.addArtifactPicker();
        //     },
        //     failure: function(msg) {
        //         me.setLoading(false);
        //         deferred.reject(msg);
        //     },
        //     scope: me
        // });
    },
    
    showErrorNotification: function(msg){
        if (!msg){
            msg = "Error during execution.  See logs for details."
        }
        Rally.ui.notify.Notifier.showError({message: msg});
    },

    addArtifactPicker: function(){
        this.getArtifactBox().removeAll();
        this.getGranularityBox().removeAll();

        var filters = [{
            property: 'TypePath',
            operator: 'contains',
            value: 'PortfolioItem/'
        },{
            property: 'TypePath',
            value: 'Defect'
        },{
            property: 'TypePath',
            value: 'HierarchicalRequirement'
        }];
        filters = Rally.data.wsapi.Filter.or(filters);

        this.getArtifactBox().add({
                xtype: 'rallycombobox',
                itemId: 'cb-ArtifactType',
                name: 'artifactType',
                storeConfig: {
                    model: 'TypeDefinition',
                    filters: filters,
                    remoteFilter: true,
                    autoLoad: true
                },
                fieldLabel: 'Artifact Type',
                allowBlank: false,
                labelAlign: 'right',
                labelWidth: 150,
                width: 300,
                valueField: 'TypePath',
                displayField: 'DisplayName',
                listeners: {
                    scope: this,
                    change: function(cb){
                        this.addSelectors();
                    }
                }              
            });        

        this.getGranularityBox().add({
            xtype: 'radiogroup',
            itemId: 'granularity',
            fieldLabel: 'Granularity',
            labelAlign: 'right',
            // columns: 3,
            // vertical: true,
            layout: 'hbox',
            labelWidth: 100,
            width:500,
            items: [{
                boxLabel: "Week",
                name: 'granularity',
                inputValue: "week"
            },{
                boxLabel: "Day",
                name: 'granularity',
                inputValue: "day",
                checked: true
            }, {
                boxLabel: "Hour",
                name: 'granularity',
                inputValue: "hour"
            }, {
                boxLabel: "Minute",
                name: 'granularity',
                inputValue: "minute"
            } ],
            listeners:{
                change: function(){
                    this.setUpdateButtonUpdateable(true);
                },
                scope:this
            }
        });
    },

    addSelectors: function(){
        this.getSelectorBox().removeAll();
        this.getCycleTimeBox().removeAll();
        this.getFilterBox().removeAll();
        this.getMessageBox().update({message: this.instructions});

        var fp = this.getSelectorBox().add({
            xtype: 'fieldpickerbutton',
            modelNames: this.getModelNames(),
            context: this.getContext(),
            stateful: true,
            stateId: 'grid-columns'
        });
        fp.on('fieldsupdated', this.updateGridFields, this);

        var filter = this.getSelectorBox().add({
            xtype: 'rallyinlinefilterbutton',
            modelNames: this.getModelNames(),
            context: this.getContext(),
            margin: '3 9 0 0',
            stateful: true,
            stateId: 'grid-filters-1',
            inlineFilterPanelConfig: {
                quickFilterPanelConfig: {
                    addQuickFilterConfig: {
                        whiteListFields: ['Milestones', 'Tags']
                    }
                },
                advancedFilterPanelConfig: {
                    advancedFilterRowsConfig: {
                        propertyFieldConfig: {
                            whiteListFields: ['Milestones', 'Tags']
                        }
                    }
                }
            },
            listeners: {
                inlinefilterready: this.addInlineFilterPanel,
                inlinefilterchange: this.updateGridFilters,
                scope: this
            }
        });


        var ctButton = this.getSelectorBox().add({
            xtype: 'cycletimepickerbutton',
            modelNames: this.getModelNames(),
            context: this.getContext(),
            margin: '3 9 0 0',
            listeners: {
                cycletimepickerready: this.addCycleTimePanel,
                scope: this,
                cycletimeparametersupdated: this.updateCycleTimeParameters
            }
        });

        this.getSelectorBoxRight().removeAll();


        var bt = this.getSelectorBoxRight().add({
            xtype: 'rallybutton',
            itemId: 'btUpdate',
            text: 'Update',
            width: 100,
            margin: '3 9 0 0'
        });
        bt.on('click', this.updateGrid, this);

        this.getSelectorBoxRight().add({
            xtype: 'rallybutton',
            style: {'float': 'right'},
            cls: 'secondary rly-small',
            margin: '3 9 0 0',
            frame: false,
            itemId: 'actions-menu-button',
            iconCls: 'icon-export',
            listeners: {
                click: this.showExportMenu,
                scope: this
            }
        });
        this.getSelectorBoxRight().add({
            xtype: 'rallybutton',
            iconCls: 'icon-help',
            cls: 'help-button',
            margin: '0 9 0 25',
            listeners: {
                click: this.showInstructionsDialog,
                scope: this
            }
        });
    },
     showInstructionsDialog: function(btn){
         var popoverTarget = btn.getEl();

         this.popover = Ext.create('Rally.ui.popover.Popover', {
             target: popoverTarget,
             placement: ['bottom', 'left', 'top', 'right'],
             cls: 'field-picker-popover',
             toFront: Ext.emptyFn,
             buttonAlign: 'center',
             title: "Cycle Time App Instructions",
             width: Math.min(this.getWidth(),400),
             listeners: {
                 destroy: function () {
                     this.popover = null;
                 },
                 scope: this
             },
             buttons: [
                 {
                     xtype: "rallybutton",
                     text: 'Close',
                     cls: 'field-picker-cancel-btn secondary dark rly-small',
                     listeners: {
                         click: function() {
                             this.popover.close();
                         },
                         scope: this
                     }
                 }
             ],
             items: [
                 {
                     xtype: 'container',
                     html: this.instructions
                 }
             ]
         });
     },
    showExportMenu: function(button){
         var menu = Ext.widget({
             xtype: 'rallymenu',
             items: [
             {
                 text: 'Export Summary...',
                 handler: function(){
                     this.exportData(false,true);
                 },
                 scope: this
             },{
                 text: 'Export with Timestamps...',
                 handler: function(){
                     this.exportData(true,false);
                 },
                 scope: this
             },{
                 text: 'Export Summary and Timestamps...',
                 handler: function(){
                     this.exportData(true, true);
                 },
                 scope: this
             }
            ]
         });
         menu.showBy(button.getEl());
         if(button.toolTip) {
             button.toolTip.hide();
         }
     },
    getSelectorBoxRight: function(){
         return this.down('#selector_box_right');
     },
    getFilterBox: function(){
        return this.down('#filter_box');
    },
    getCycleTimeBox: function(){
        return this.down('#cycletime_box');
    },
    addInlineFilterPanel: function(panel){
        this.logger.log('addInlineFilterPanel', panel);
        this.getFilterBox().add(panel);
    },
    addCycleTimePanel: function(panel){
        this.logger.log('addCycleTimePanel', panel);
        this.getCycleTimeBox().add(panel);
    },
    updateGridFields: function(fields){
        this.logger.log('updateGridFields', fields);
        this._gridConfig.fields = fields;
        this.updateGrid();
    },
     setUpdateButtonUpdateable: function(updateable){
         var button = this.down('#btUpdate');
         if (!button){
             return;
         }

         if (updateable){
             button.setDisabled(false);
             button.setIconCls('icon-refresh');
         } else {
             button.setDisabled(true);
             button.setIconCls('');
         }
     },
    updateGridFilters: function(filter){
        this.logger.log('updateGridFilters', filter.getTypesAndFilters());
        this._gridConfig.filters = filter.getTypesAndFilters();
        this.getSelectorBox().doLayout();
        this.setUpdateButtonUpdateable(true);
    },
    updateCycleTimeParameters: function(parameters){
        this.logger.log('updateCycleTimeParameters',parameters.getCycleTimeParameters());
        this._gridConfig.cycleTimeParameters = parameters.getCycleTimeParameters();
        this.setUpdateButtonUpdateable(true);
    },
     calculateCycleTime: function(){
         return this.down('cycletimepickerbutton') && this.down('cycletimepickerbutton').hasValidCycleTimeParameters() || false;
     },
     getMessageBox: function(){
         return this.down('#message_box');
     },
     updateMessageBox: function(msg, color){

         if (color){
             msg = Ext.String.format('<span style="color:{0};">{1}</span>',color,msg);
         }

         this.getMessageBox().update({message: msg});
     },
     updateGrid: function(){
         CArABU.technicalservices.CycleTimeCalculator.startDate = this.getStartDate();
         CArABU.technicalservices.CycleTimeCalculator.endDate = this.getEndDate();
         CArABU.technicalservices.CycleTimeCalculator.precision = this.getSetting('precision');
         CArABU.technicalservices.CycleTimeCalculator.granularity = this.down('#granularity') && this.down('#granularity').getValue()  && this.down('#granularity').getValue().granularity;

         this.getGridBox().removeAll();
         this.down('#total_box').removeAll();

         this.updateMessageBox();
         this.setUpdateButtonUpdateable(false);
         this.setLoading('Loading Current Data...');

         this.fetchWsapiArtifactData().then({
             success: this.buildCycleGrid,
             failure: this.showErrorNotification,
             scope: this
         }).always(function(){ this.setLoading(false);}, this);
     },
     buildCycleGrid: function(records){
        this.logger.log('buildCycleGrid', records);

         if (records && records.length > 0){
             if (this.calculateCycleTime()){
                 this.setLoading('Loading Historical data...')
                 this.fetchHistoricalData(records).then({
                     success: this.addGrid,
                     failure: this.showErrorNotification,
                     scope: this
                 }).always(function(){ this.setLoading(false);}, this);
             } else {
                 this.addGrid(records);
             }
         } else {
             //there's a message, the need to refine the data.
         }
     },
     addGrid: function(records){
         this.logger.log('addGrid', records.length);
         var fields = records.length > 0 && records[0].getFields() || undefined;

         this.suspendLayouts();
         this.addTotals(records);

         var store = Ext.create('Rally.data.custom.Store',{
             data: records,
             fields: fields,
             pageSize: 25 //records.length
         });

         this.getGridBox().add({
             xtype: 'rallygrid',
             itemId: 'main-grid',
             store: store,
             columnCfgs: this.getColumnCfgs(records[0]),
             scroll: 'vertical',
             emptyText:  '<div class="no-data-container"><div class="secondary-message">No data was found for the selected current filters, cycle time parameters and project scope.</div></div>',
             listeners:{
                load: function(records, operation){
                    console.log('Grid load',records);
                }
             },
         });
         this.resumeLayouts(true);
     },

     /*
        Create a table
        [
            {"Name":"Sum", "CycleTimeData":"123.0", "Backlog":"100","In-progress":"200"},
            {"Name":"Average",  "CycleTimeData":"12.3", "Backlog":"60","In-progress":"30"}
        ]

     */

    addTotals:function(updatedRecords) {
        console.log('Add Totals',updatedRecords);
        var me = this;
        var headers = [];
        var totals = {"Name":"Totals"};
        var count = {};
        var records = [];

        var states = this.getCycleStates(),
            stateField = this.getStateField(),
            includeBlocked = this.getIncludeBlocked(),
            includeReady = this.getIncludeReady(),
            previousStates = this.getPreviousStates(),
            endStates = this.getEndStates();

        totals["CycleTime"] = 0;
        count["CycleTime"] = 0;

        if (includeBlocked){
            totals["Blocked"] = 0;
            count["Blocked"] = 0;
        }
        if (includeReady){
            totals["Ready"] = 0;
            count["Ready"] = 0;
        }

        for (var s = 0; s < states.length; s++){
            if(states[s] != ""){
                totals[states[s]] = 0;
                count[states[s]] = 0;
                if(states[s] == this.getToStateValue()){
                    s = states.length;
                }                  
            }
        }

        for (var i = 0; i < updatedRecords.length; i++){
            var    record = updatedRecords[i];

            //CycleTime
            var timeInStateData = record.get('timeInStateData');

            if(record.get('cycleTimeData') && record.get('cycleTimeData').cycleTime && Number(record.get('cycleTimeData') && record.get('cycleTimeData').cycleTime) != 0){
                totals["CycleTime"] +=  Number(record.get('cycleTimeData') && record.get('cycleTimeData').cycleTime);
                count["CycleTime"]++                
            }


            if (includeBlocked){
                var blocked_val = Number(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData, "Blocked",null,""));
                if(blocked_val != NaN && Number(blocked_val) != 0){
                    totals["Blocked"] += blocked_val;
                    count["Blocked"]++;                    
                }
            }
            if (includeReady){
                var ready_val = Number(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData, "Ready",null,""));
                if(ready_val !=  NaN && ready_val != 0){
                    totals["Ready"] += ready_val;
                    count["Ready"]++;                    
                }                
            }

            for (var s = 0; s < states.length; s++){
                if (timeInStateData && states[s] != ""){

                    var timeinstate_val = Number(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData[stateField], states[s], record.get(states[s]), ""));
                    if(timeinstate_val !=  NaN && timeinstate_val != 0){
                        totals[states[s]] += timeinstate_val;
                        count[states[s]]++;                    
                    }
                    if(states[s] == this.getToStateValue()){
                        s = states.length;
                    }

                } 
            }

        }
        
        var avg = {};
        _.each(totals, function(val,key){
            avg[key] = count[key] > 0 ? totals[key] / count[key] : 0; 
        })

        avg["Name"] = "Averages";
        count["Name"] = "Counts"
        console.log('totals/counts',totals,count,avg);
        var columns = [];

        _.each(Ext.Object.getKeys(totals),function(key){
            if(key == "Name"){
                columns.push({
                    text: "",
                    dataIndex: key,
                    flex: 1         
                });
            }else{
                columns.push({
                    text: key,
                    dataIndex: key,
                    flex: 1,
                    renderer: function(value){
                        return Ext.util.Format.round(value,2);
                    }                
                });                
            }

        });

        me.down('#total_box').removeAll();
        
        me.down('#total_box').add({
            xtype: 'rallygrid'
            ,
            showPagingToolbar: false,
            showRowActionsColumn: false,
            editable: false,
            store: Ext.create('Rally.data.custom.Store', {
                data: [totals,avg,count]
            }),
            border:1,
            title: 'Summary in ' + CArABU.technicalservices.CycleTimeCalculator.granularity +'(s)',
            titleAlign: 'center',
            columnCfgs: columns
        });       

    },

     fetchWsapiArtifactData: function(){
         var deferred = Ext.create('Deft.Deferred');
         Ext.create('Rally.data.wsapi.artifact.Store',{
            models: this.getModelNames(),
            limit: this.getExportLimit(),
            fetch: this.getCurrentFetchList(),
            filters: this.getWsapiArtifactFilters(),
            pageSize: Math.min(this.getExportLimit(), 1000)
        }).load({
             callback: function(records, operation){
                 this.logger.log('fetchWsapiArtifactData', records.length, operation, records);
                 if (operation.wasSuccessful()){
                     var count =  operation && operation.resultSet && operation.resultSet.total;
                     this.logger.log('count', count, this.getExportLimit());
                     if (count > this.getExportLimit()){
                         this.updateMessageBox(Ext.String.format('A total of {0} current records were found, but only {1} can be fetched for performance reasons.  Please refine the advanced filters (current, not Cycle Time) to fetch less data.',count,this.getExportLimit()), Rally.util.Colors.brick);
                        deferred.resolve(null);
                     } else {
                         this.updateMessageBox(Ext.String.format('{0} current records found.', count));
                         deferred.resolve(records);
                     }

                 } else {
                     deferred.reject("Unable to get artifact count:  " + operation.error.errors.join(','));
                 }
             },
             scope: this
         });

         return deferred;
     },

    getWsapiArtifactFilters: function(){
        var filters = this._gridConfig && this._gridConfig.filters && this._gridConfig.filters.filters[0] || null;
        if (this.getQueryFilter()){
            if (filters){
                filters = filters.and(this.getQueryFilter());
            } else {
                filters = this.getQueryFilter();
            }
        }
        this.logger.log('getWsapiArtifactFilters', filters);
        if (this.calculateCycleTime() && this.getShowOnlyCompletedCycles()){  //show only data that is in a completed cycle state

            var states = this.getCycleStates(),
                cycleFilters = [],
                stateFieldName = this.getStateField(),
                toStateValue = this.getToStateValue();

            var re = new RegExp("PortfolioItem\/","i");
            if (re.test(this.getModelNames()[0]) && stateFieldName === 'State'){
                stateFieldName = "State.Name";
            }

            if (stateFieldName === 'FlowState'){
                stateFieldName = "FlowState.Name";
            }
            
            Ext.Array.each(states, function(s){
               // console.log('s',stateFieldName, s);
                if (s === toStateValue || cycleFilters.length > 0){
                    cycleFilters.push({
                        property: stateFieldName,
                        value: s
                    });
                }
            });
            cycleFilters = Rally.data.wsapi.Filter.or(cycleFilters);

            if (filters){
                filters = filters.and(cycleFilters);
            } else {
                filters = cycleFilters;
            }

        }
        filters = filters || [];
        this.logger.log('getWsapiArtifactFilters', filters.toString());
        return filters;
    },
     getStartDate: function(){
        if (this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.startDate){
        //if (this.startDatePicker.getValue()){
            return this._gridConfig.cycleTimeParameters.startDate;
            //return Rally.util.DateTime.toIsoString(this._gridConfig.cycleTimeParameters.startDate);
        }
        return null;
    },
    getEndDate: function(){
        if (this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.endDate){
        //if (this.endDatePicker.getValue()){
            return this._gridConfig.cycleTimeParameters.endDate;
            //return Rally.util.DateTime.toIsoString(this._gridConfig.cycleTimeParameters.endDate);
        }
        return null;
    },
    getCycleStates: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.cycleStates || [];
    },
    getGridColumns: function(){
        return this.down('fieldpickerbutton') && this.down('fieldpickerbutton').getFields();
        //return this._gridConfig && this._gridConfig.fields || [];
    },
    getPreviousStates: function(endState){
       var states = this.getCycleStates(),
        // var states = this.getFromStateCombo().getStore().getRange(),
            previousStates = [null];

        for (var i=0; i<states.length; i++){
            var state = states[i];
            if (state === endState){
                i = states.length;
            } else {
                if (state && state.length > 0){
                    previousStates.push(state);
                }
            }
        }
        this.logger.log('getPreviousStates', previousStates);
        return previousStates;
    },
    getEndStates: function(endState){
        if (!endState){
            endState = this.getToStateValue();
        }

        var states = this.getCycleStates(),
            endStates = [];
        this.logger.log('getEndStates', endState, states);

        for (var i=states.length-1; i>0; i--){
            var state = states[i];
            endStates.push(state);
            if (state === endState){
                i = 0;
            }
        }
        return endStates;
    },
    getCurrentFetchList: function(){
        var fetch = Ext.Array.merge(this.getGridColumns(), ['ObjectID']);
        if (this.getStateField()){
            Ext.Array.merge(this.getStateField(), fetch);
        }
        if (this.getIncludeBlocked()){
            Ext.Array.merge('Blocked', fetch);
        }
        if (this.getIncludeReady()){
            Ext.Array.merge(fetch, 'Ready');
        }
        this.logger.log('getCurrentFetchList', fetch);
        return fetch;
    },
    getShowOnlyCompletedCycles: function(){
        return true;
    },
    getWsapiArtifactCount: function(config){
        config.limit = 1;
        config.fetch = ['ObjectID'];
        config.pageSize = 1;
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.artifact.Store',config).load({
            callback: function(records, operation){
                this.logger.log('getWsapiArtifactCount', operation);
                if (operation.wasSuccessful()){
                    var count = operation && operation.resultSet && operation.resultSet.total;
                    deferred.resolve(count);
                } else {
                    deferred.reject("Unable to get aritfact count:  " + operation.error.errors.join(','));
                }
            },
            scope: this
        });

        return deferred;
    },



    getExportLimit: function(){
        return this.getSetting('exportLimit') || 1000;
    },
    getStateValueArray: function(){
        var arr = _.map(this.getFromStateCombo().getStore().getRange(), function(r){
            return r.get('value');
        }, this);
        Ext.Array.remove(arr, "");
        return arr;
    },
     fetchHistoricalData: function(records){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('fetchHistoricalData', records);

        if (this.calculateCycleTime() && records.length > 0) {
            this.setLoading(Ext.String.format("Loading historical data for {0} artifacts.", records.length));

            var includeBlocked = this.getIncludeBlocked(),
                includeReady = this.getIncludeReady(),
                fromState = this.getFromStateValue(),
                toState = this.getToStateValue(),
                stateField = this.getStateField(),
                stateValues = this.getCycleStates();

            this.logger.log('stateValues', stateValues);
            Ext.create('CArABU.technicalservices.CycleTimeDataStore', {
                stateField: stateField,
                stateValues: stateValues,
                includeReady: includeReady,
                includeBlocked: includeBlocked,
                fromState: fromState,
                toState: toState,
                startDate: this.getStartDate(),
                endDate: this.getEndDate()
            }).load(records).then({
                success: function (updatedRecords) {

                   this.updateMessageBox(Ext.String.format("Displaying {0} of {1} records with relevant cycle time data.", updatedRecords.length, records.length));

                    deferred.resolve(updatedRecords);
                },
                failure: function (msg) {
                    deferred.reject(msg);
                },
                scope: this
            }).always(function () {
                this.setLoading(false);
            }, this);
        }else {
            deferred.resolve(records);
        }

        return deferred;
    },
    updateHistoricalData: function(updatedRecords){
        this.logger.log('updateHistoricalData', updatedRecords);
    },
    getCycleTimeColumnHeader: function(){
        return Ext.String.format("Cycle time from {0} to {1} ({2}s)", this.getFromStateValue(), this.getToStateValue(), CArABU.technicalservices.CycleTimeCalculator.granularity);
    },
    getCycleTimeStartColumnHeader: function(){
        return "Cycle Time Start Date";
    },
    getCycleTimeEndColumnHeader: function(){
        return "Cycle Time End Date";
    },
    getTimeInStateColumnHeader: function(stateName){
        return Ext.String.format("Time in {0} ({1}s)", stateName || "[No State]", CArABU.technicalservices.CycleTimeCalculator.granularity);
    },
    getHistoricalDataColumns: function(){


        var columns = [],
            toState = this.getToStateValue(),
            fromState = this.getFromStateValue();

        if (fromState && toState){
            columns.push({
                xtype: 'cycletimetemplatecolumn',
                text: this.getCycleTimeColumnHeader(),
                flex: 1
            });
        }


        if (this.getIncludeBlocked()){
            columns.push({
                xtype: 'timetemplatecolumn',
                dataType: 'timeInStateData',
                stateName: "Blocked",
                text: this.getTimeInStateColumnHeader("Blocked"),
                flex: 1
            });
        }
        if (this.getIncludeReady()){
            columns.push({
                xtype: 'timetemplatecolumn',
                dataType: 'timeInStateData',
                stateName: 'Ready',
                text: this.getTimeInStateColumnHeader("Ready"),
                flex: 1
            });
        }


        if (fromState && toState){
            Ext.Array.each( this.getCycleStates(), function(s){

                if (s && s.length > 0){
                    var header = this.getTimeInStateColumnHeader(s);
                    //if (s === CArABU.technicalservices.CycleTimeCalculator.creationDateText){
                    //    header =  this.getTimeInStateColumnHeader(CArABU.technicalservices.CycleTimeCalculator.noStateText);
                    //}
                    columns.push({
                        xtype: 'timetemplatecolumn',
                        dataType: 'timeInStateData',
                        stateName: this.getStateField(),
                        stateValue: s,
                        text: header,
                        flex: 1
                    });
                    if (s === toState){ return false; }
                }

            }, this);
        }
        this.logger.log('getHistoricalDataColumns', columns);
        return columns;
    },
    getColumnCfgs: function(model){
        var columns = [];

        Ext.Array.each(this.getCurrentFetchList(), function(c){
            if (c !== 'ObjectID'){
                if (model){
                    var field = model.getField(c),
                        tpl = Rally.ui.renderer.RendererFactory.getRenderTemplate(field),
                        col = {
                            text: field.displayName,
                            dataIndex: c,
                            //renderer: tpl
                            renderer: function(v,m,r){
                                 return tpl.apply(r.getData());
                            }
                        };
                } else {
                    var col = {
                        text: c.replace("c_",""),
                        dataIndex: c
                    };
                }
                if (c === 'Name'){
                    col.flex = 1;
                }
                columns.push(col);
            }
        });


        if (this.calculateCycleTime()){
            columns = columns.concat(this.getHistoricalDataColumns());
        }
        this.logger.log('getColumnCfgs', columns);
        return columns;
    },

    exportData: function(includeTimestamps, includeSummary){
        var grid = this.down('#main-grid');
        if (!grid){
            this.showErrorNotification("Cannot save export becuase there is no data displapyed to export.");
            return;
        }
        var totalCount= grid.getStore().getTotalCount();
        this.logger.log('exportData', totalCount);

        var store = grid.getStore();

        this.getMessageBox().setLoading("Preparing Export File(s)...");
        store.load({
            pageSize: totalCount,
            limit: totalCount,
            callback: function(records, operation){
                this.getMessageBox().setLoading(false);
                if (operation.wasSuccessful()){
                    var columns = this.getColumnCfgs(records && records[0]);
                    this.saveExportFiles(records, columns, includeTimestamps, includeSummary);
                } else {
                    this.logger.log('Error preparing export data', operation);
                    Rally.ui.notify.Notifier.showError('Error preparing export data:  ' + operation && operation.error && operation.error.errors.join(','));
                }

            },
            scope: this
        });
    },
    saveExportFiles: function(updatedRecords, columns, includeTimestamps, includeSummary){

        if (includeSummary){
            var filename = Ext.String.format("cycle-time-{0}.csv", Rally.util.DateTime.format(new Date(), 'Y-m-d-h-i-s')),
                csv = this.getExportSummaryCSV(updatedRecords, columns);
           // this.logger.log('saveExportFiles', csv, filename);
            CArABU.technicalservices.Exporter.saveCSVToFile(csv, filename);
        }
        if (includeTimestamps){
            var filename = Ext.String.format("time-in-state-{0}.csv", Rally.util.DateTime.format(new Date(), 'Y-m-d-h-i-s')),
                timeStampCSV = this.getExportTimestampCSV(updatedRecords);
           // this.logger.log('saveExportFiles', timeStampCSV);
            CArABU.technicalservices.Exporter.saveCSVToFile(timeStampCSV, filename);
        }
    },
    getExportTimestampCSV: function(updatedRecords){
        return CArABU.technicalservices.CycleTimeCalculator.getExportTimestampCSV(updatedRecords, this.exportDateFormat);
    },
    getExportSummaryCSV: function(updatedRecords, columns){
        var standardColumns = _.filter(columns, function(c){ return c.dataIndex || null; }),
            headers = _.map(standardColumns, function(c){ if (c.text === "ID") {return "Formatted ID"; } return c.text; }),
            fetchList = _.map(standardColumns, function(c){ return c.dataIndex; });

        this.logger.log('getExportSummaryCSV', headers, fetchList);
        var states = this.getCycleStates(),
            stateField = this.getStateField(),
            includeBlocked = this.getIncludeBlocked(),
            includeReady = this.getIncludeReady();

        headers.push(this.getCycleTimeColumnHeader());
        headers.push(this.getCycleTimeStartColumnHeader());
        headers.push(this.getCycleTimeEndColumnHeader());

        if (includeBlocked){
            headers.push(this.getTimeInStateColumnHeader("Blocked"));
        }
        if (includeReady){
            headers.push(this.getTimeInStateColumnHeader("Ready"));
        }

        Ext.Array.each(states, function(state){
            //if (state === CArABU.technicalservices.CycleTimeCalculator.creationDateText){
            //    headers.push(this.getTimeInStateColumnHeader(CArABU.technicalservices.CycleTimeCalculator.noStateText));
            //} else {
                headers.push(this.getTimeInStateColumnHeader(state));
            //}

        }, this);

        var csv = [headers.join(',')],
            dateFormat = this.exportDateFormat;

        for (var i = 0; i < updatedRecords.length; i++){
            var row = [],
                record = updatedRecords[i];

            for (var j = 0; j < fetchList.length; j++){
                var val = record.get(fetchList[j]);
                if (Ext.isObject(val)){
                    if (val._tagsNameArray){
                        var newVal = [];
                        Ext.Array.each(val._tagsNameArray, function(t){
                            newVal.push(t.Name);
                        });
                        val = newVal.join(',');
                    } else {
                        val = val._refObjectName;
                    }
                }
                row.push(val || "");
            }
            //CycleTime
            var timeInStateData = record.get('timeInStateData');

            row.push(record.get('cycleTimeData') && record.get('cycleTimeData').cycleTime || "");

            var startDate = record.get('cycleTimeData') && record.get('cycleTimeData').startDate || null,
                endDate = record.get('cycleTimeData') && record.get('cycleTimeData').endDate || null;

            var formattedStart = startDate && Rally.util.DateTime.format(startDate,dateFormat) || "",
                formattedEnd = endDate && Rally.util.DateTime.format(endDate,dateFormat) || "";

            row.push(formattedStart);
            row.push(formattedEnd);

            if (includeBlocked){
                row.push(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData, "Blocked",null,""));
            }
            if (includeReady){
                row.push(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData, "Ready",null, ""));
            }

            for (var s = 0; s < states.length; s++){
                if (timeInStateData){
                    row.push(CArABU.technicalservices.CycleTimeCalculator.getRenderedTimeInStateValue(timeInStateData[stateField], states[s], record.get(states[s]), ""));
                } else {
                    row.push("");
                }
            }

            row = _.map(row, function(v){ return Ext.String.format("\"{0}\"", v.toString().replace(/"/g, "\"\""));});
            csv.push(row.join(","));
        }
        return csv.join("\r\n");
    },

    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
                
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    getQueryFilter: function(){
        var filter = this.getSetting('queryFilter');
        if (filter && filter.length > 0){
            return Rally.data.wsapi.Filter.fromQueryString(filter);
        }
        return null;
    },
    getIncludeBlocked: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.showBlocked || false;
       // return this.includeBlocked.pressed;

    },
    getIncludeReady: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.showReady || false;
       // return this.includeReady.pressed;
    },
    getFromStateCombo: function(){
        return this.cycleTimeFromState;
        //return this.down('#cb-fromState');
    },
    getToStateCombo: function(){
        return this.cycleTimeToState;
        //return this.down('#cb-toState');
    },
    getToStateValue: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.cycleEndState || null;
    },
    getFromStateValue: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.cycleStartState || null;
    },
    getStateField: function(){
        return this._gridConfig && this._gridConfig.cycleTimeParameters && this._gridConfig.cycleTimeParameters.cycleStateField || null;
        //return this.cycleTimeField;
    },
    getModelNames: function(){
        //var modelNames = this.getSetting('artifactType'); //includeTypes');
        var modelNames = this.down('#cb-ArtifactType').getValue();

        //if (Ext.isString(modelNames)){
        //    modelNames = modelNames.split(',');
        //    return modelNames;
        //}
        this.logger.log('getModelNames', modelNames);
        return [modelNames] || [];
    },
    getArtifactBox: function(){
        return this.down('#artifact_box');
    }, 
    getGranularityBox: function(){
        return this.down('#granularity_box');
    }, 
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getGridBox: function(){
        return this.down('#grid_box');
    },
    getSettingsFields: function(){
        return CArABU.technicalservices.CycleTimeData.Settings.getFields(this.getSettings());
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.addSelectors();
    }
});

            
               Rally.launchApp('cycle-time-data-app', {
                   name: 'Cycle Time Data'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.rly-left {
    width: 75%;
}
.rly-right {
    width: 25%;
}
.warning {
    color:darkred;
}
.help-button {
    color:silver;
    background-color:white;
    font-size:14px;
}
    </style>

</head>
<body></body>
</html>